name: 'Ephemeral Test Suite'
description: 'Run comprehensive test suite with unit, integration, and selenium tests in Docker containers'
inputs:
  test-type:
    description: 'Type of tests to run (unit, integration, selenium, all)'
    required: false
    default: 'all'
  timeout:
    description: 'Timeout in seconds for tests'
    required: false
    default: '600'
  working-directory:
    description: 'Working directory to run tests from (useful for monorepos)'
    required: false
    default: '.'
  upload-results:
    description: 'Whether to upload test results as artifacts'
    required: false
    default: 'true'
  test-repository:
    description: 'Repository containing the test suite'
    required: false
    default: 'RoyFlo360/ephemeral_poc'

outputs:
  success:
    description: 'Whether all tests passed successfully'
    value: ${{ steps.run-tests.outputs.success }}
  logs:
    description: 'Test execution logs'
    value: ${{ steps.run-tests.outputs.logs }}

runs:
  using: 'composite'
  steps:
    - name: Checkout test repository
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.test-repository }}
        path: ephemeral-test-suite
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        
    - name: Install Python dependencies
      run: |
        cd ephemeral-test-suite
        pip install --upgrade pip
        pip install -r requirements.txt
        echo "Installed Python packages:"
        python -c "
        import pkg_resources
        packages = ['docker', 'pytest', 'psycopg2', 'selenium']
        for pkg in packages:
            try:
                version = pkg_resources.get_distribution(pkg).version
                print(f'{pkg:<15} {version}')
            except pkg_resources.DistributionNotFound:
                print(f'{pkg:<15} not found')
        "
      shell: bash
        
    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
      shell: bash
        
    - name: Start Docker service
      run: |
        sudo systemctl start docker
        sudo systemctl status docker
        docker --version
        docker-compose --version
      shell: bash
        
    - name: Run Tests
      id: run-tests
      run: |
        echo "Current directory: $(pwd)"
        echo "Listing ephemeral-test-suite directory:"
        ls -la ephemeral-test-suite/ || echo "Directory not found"
        echo "Checking for test_runner.py:"
        ls -la ephemeral-test-suite/test_runner.py || echo "test_runner.py not found"
        echo "Checking for requirements.txt:"
        ls -la ephemeral-test-suite/requirements.txt || echo "requirements.txt not found"

        cd ephemeral-test-suite
        echo "Current working directory: $(pwd)"
        echo "Python version: $(python --version)"
        echo "Python path: $(which python)"
        echo "Available Python packages:"
        python -c "
        import pkg_resources
        packages = [d for d in pkg_resources.working_set]
        for i, pkg in enumerate(packages[:20]):
            print(f'{pkg.project_name:<20} {pkg.version}')
        if len(packages) > 20:
            print(f'... and {len(packages) - 20} more packages')
        "
        
        echo "Running ${{ inputs.test-type }} tests with timeout ${{ inputs.timeout }}s"
        
        # Create test-results directory if it doesn't exist
        mkdir -p test-results/integration test-results/selenium test-results/unit
        
        # Run tests with Python's internal timeout handling (no shell timeout)
        # Set PYTHONUNBUFFERED to prevent broken pipe issues
        export PYTHONUNBUFFERED=1
        python test_runner.py ${{ inputs.test-type }} ${{ inputs.timeout }}
        EXIT_CODE=$?
        
        # Handle different exit codes
        if [ $EXIT_CODE -eq 124 ]; then
          echo "Tests timed out after ${{ inputs.timeout }} seconds"
          echo "success=false" >> $GITHUB_OUTPUT
          echo "logs=Tests timed out after ${{ inputs.timeout }} seconds" >> $GITHUB_OUTPUT
          exit 1
        elif [ $EXIT_CODE -eq 0 ]; then
          echo "Tests completed successfully"
          echo "success=true" >> $GITHUB_OUTPUT
          echo "logs=All tests completed successfully" >> $GITHUB_OUTPUT
        else
          echo "Tests failed with exit code $EXIT_CODE"
          echo "success=false" >> $GITHUB_OUTPUT
          echo "logs=Tests failed with exit code $EXIT_CODE" >> $GITHUB_OUTPUT
          
          # Show the test output for debugging
          if [ -f test_output.log ]; then
            echo "Test output:"
            cat test_output.log
          fi
          exit $EXIT_CODE
        fi
      shell: bash
      
    - name: Prepare Test Results for Upload
      if: always() && inputs.upload-results == 'true'
      run: |
        cd ephemeral-test-suite
        echo "Checking test-results directory..."
        ls -la test-results/ || echo "test-results directory not found"
        
        # Create a summary file if no results exist
        if [ ! -f test-results/integration/results.xml ] && [ ! -f test-results/selenium/results.xml ] && [ ! -f test-results/unit/results.xml ]; then
          echo "No test result files found, creating summary..."
          mkdir -p test-results/summary
          echo "Test execution completed at $(date)" > test-results/summary/execution-summary.txt
          echo "Test type: ${{ inputs.test-type }}" >> test-results/summary/execution-summary.txt
          echo "Exit code: ${{ steps.run-tests.outcome }}" >> test-results/summary/execution-summary.txt
        fi
        
        # Ensure there's always something to upload
        touch test-results/.gitkeep
        echo "Test results directory contents:"
        find test-results/ -type f -exec echo "File: {}" \; -exec head -5 {} \;
      shell: bash
      
    - name: Upload Test Results
      if: always() && inputs.upload-results == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ephemeral-test-results-${{ inputs.test-type }}
        path: ephemeral-test-suite/test-results/
        retention-days: 3
